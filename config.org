#+TODO: TODO | DISABLED
* introduction

The =emacs-lisp= snippets in this org file are wrangled into config.init

** Ideas and goals

*** TODO customize the locations of emacs saved logs, history, undo trees etc


* System-specific init
define functions to identify which computer the code is running on
#+begin_src emacs-lisp
  ;; Check if system is Microsoft Windows
  (defun my-system-type-is-windows ()
    "Return true if system is Windows-based (at least up to Win7)"
    (string-equal system-type "windows-nt")
    )
  ;; Check if system is Darwin/Mac OS X
  (defun my-system-type-is-darwin ()
    "Return true if system is darwin-based (Mac OS X)"
    (string-equal system-type "darwin")
    )
#+end_src

#+RESULTS:
: my-system-type-is-darwin


* Visual Tweaks

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
#+end_src

Font setup
#+begin_src emacs-lisp
  (custom-set-faces
<<<<<<< HEAD
   '(default ((t (:height 120 :family "Inconsolata"))))
   )
#+end_src

=======
   '(default ((t (:height 200 :family "Inconsolata"))))
   )
#+end_src

#+RESULTS:

>>>>>>> 0ab8cc4 (added rust to babel)
word wrap everywhere! until I learn the hard way why it's not default
#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

Hide the mark-up characters for *bold* (=*bold*=), /italics/ (=/italics/=) etc
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src


Font-lock substitution to change list markers (replacing - with a dot)
#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
#+end_src

Replaces all headlines markers with fancy Unicode bullets
#+begin_src emacs-lisp
  (use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src


* Playground - trying out temporary stuff

** multiple cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure   t
    :bind (("H-SPC" . set-rectangular-region-anchor)
           ("C-M-SPC" . set-rectangular-region-anchor)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C->" . mc/mark-all-like-this)
           ("C-c C-SPC" . mc/edit-lines)
           ))
#+end_src

#+RESULTS:
: mc/edit-lines

** org-ai
#+begin_src emacs-lisp
  (use-package org-ai
    :load-path (lambda () "c:/Users/Travis/temp/org-ai")
    :commands (org-ai-mode)
    :custom
    (org-ai-openai-api-token "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")
    :init
    (add-hook 'org-mode-hook #'org-ai-mode)
    :config
    (advice-add 'keyboard-quit :before #'org-ai-keyboard-quit))
#+end_src

#+RESULTS:
: t

** timestamps
*** enable
#+begin_src emacs-lisp
  (setq
   time-stamp-active t          ; do enable time-stamps
   time-stamp-line-limit 10     ; check first 10 buffer lines for Time-stamp:
   time-stamp-format "%Y-%02m-%02d %02H:%02M:%02S (%u)") ; date format
#+end_src


*** hook for file_save
#+begin_src emacs-lisp
  (add-hook 'write-file-hooks 'time-stamp) ; update when saving
#+end_src

* Babel
** load languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (python . t)
     (rust . t)
     ))
#+end_src

#+RESULTS:




* DISABLED ledger
#+begin_src emacs-lisp
  (use-package ledger-mode

    :ensure t

    :config

    (require 'ledger-mode))
#+end_src

#+RESULTS:
: t



* MobileOrg
** Initialization
#+begin_src emacs-lisp
  (setq org-directory "C:/Users/Travis/org-mode")
  (setq org-mobile-inbox-for-pull "C:/Users/Travis/org-mode/flagged.org")
  (setq org-mobile-directory "c:/Users/Travis/Dropbox/Apps/MobileOrg")
#+end_src

#+RESULTS:
: c:/Users/Travis/Dropbox/Apps/MobileOrg


** Windows-only initialization
checksum program =sha1sum=
#+begin_src emacs-lisp
  (if (my-system-type-is-windows)
      (defcustom org-mobile-checksum-binary (file-truename "C:/Users/Travis/scoop/apps/msys2/2022-10-28/usr/bin/sha1sum.exe")
        "Executable used for computing checksums of agenda files."
        :group 'org-mobile
        :type 'string)
    )
#+end_src

#+RESULTS:
: org-mobile-checksum-binary


* ORG-ROAM
** OS-specific initializations
#+begin_src emacs-lisp
  (if (my-system-type-is-windows)
      (use-package org-roam
        :custom
        (org-roam-directory (file-truename "C:/Users/Travis/org-mode/org-roam/"))
        (org-roam-db-location (expand-file-name (concat "org-roam." "windows" ".db") org-roam-directory))
        )
      )
#+end_src


** use-package
#+begin_src emacs-lisp
    (use-package org-roam
    :ensure t
    :bind (("C-c m l" . org-roam-buffer-toggle)
           ("C-c m f" . org-roam-node-find)
           ("C-c m g" . org-roam-graph)
           ("C-c m i" . org-roam-node-insert)
           ("C-c m c" . org-roam-capture)
           ("C-c m o" . org-id-get-create)
           ;; Dailies
           :map org-mode-map
           ("C-M-g" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday))
    :bind-keymap
    ("C-c m d" . org-roam-dailies-map)
    :custom
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%I:%M %p>:\n %?"
        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))
       ("l" "louise" entry "* %<%I:%M %p>:\n %?"
        :if-new (file+head "%<%Y-%m-%d> - Louise.org" "#+title: %<%Y-%m-%d> - Louise\n"))
       ("m" "martin" entry "* %<%I:%M %p>:\n %?"
        :if-new (file+head "%<%Y-%m-%d> - Martin.org" "#+title: %<%Y-%m-%d> - Martin\n"))
       ("f" "frankie" entry "* %<%I:%M %p>:\n %?"
        :if-new (file+head "%<%Y-%m-%d> - Frankie.org" "#+title: %<%Y-%m-%d> - Frankie\n"))
       ("g" "maggi" entry "* %<%I:%M %p>:\n %?"
        :if-new (file+head "%<%Y-%m-%d> - Maggi.org" "#+title: %<%Y-%m-%d> - Maggi\n"))
       )
     )
     :config
     (require 'org-roam-dailies) ;; Ensure the keymap is available -- keeps timing out
     (org-roam-db-autosync-mode)
     )
#+end_src

** capture-templates
#+begin_src emacs-lisp
  (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S> - ${slug}.org"
                              "#+title: ${title}\n#+date: %T\nTime-stamp: <>")
           :unnarrowed t
           )
          ("p" "project" plain
           "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
           :if-new (file+head "%<%Y%m%d%H%M%S> - ${slug}.org"
                              "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
           :unnarrowed t
           )
          ("l" "literature" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S> - ${slug}.org"
                              "#+title: ${title}\n")
           :unnarrowed t
           )
          ("t" "todo" plain
           "\n\n** TODO ${title}\n:PROPERTIES:\n:OPENED: %T\n%?"
           :target (file+olp "Todo List.org"
                             ("Todo Items"))
           :unarrowed t
           )
          )
   )
#+end_src

#+RESULTS:
| d | default | plain | %? | :if-new | (file+head %<%Y%m%d%H%M%S> - ${slug}.org #+title: ${title} |


* Virtualenvwrapper
#+begin_src emacs-lisp
  (require 'virtualenvwrapper)
  (setq venv-location '("d:/Code/whisper/venv/"))
#+end_src


* Circe
#+begin_src emacs-lisp
  (require 'circe)
  (setq circe-network-options ' (("Bitlbee" :nick "trav")))
#+end_src


* Hydras

[[https://github.com/abo-abo/hydra][Hydra]] is a method to customize personal and visual menus to summarize
various functionality.

------------

Please note: =:color red= is for repeating actions, =:color blue= for
one-time actions. From [[https://github.com/abo-abo/hydra][the web site]]:

#+BEGIN_QUOTE
The =:color= key is a shortcut. It aggregates =:exit= and
=:foreign-keys= key in the following way:

| color    | toggle                     |
|----------+----------------------------|
| red      | stay                       |
| blue     | :exit t                    |
| amaranth | :foreign-keys warn         |
| teal     | :foreign-keys warn :exit t |
| pink     | :foreign-keys run          |
#+END_QUOTE

** Start of hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :defer 90
    :config ;; executed after loading package
#+END_SRC

** apropos -> =C-c h=

Example 10 from hydra-examples.el
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-apropos (:color blue
                           :hint nil)
    "
  _a_propos        _c_ommand
  _d_ocumentation  _l_ibrary
  _v_ariable       _u_ser-option
  ^ ^       valu_e_"
    ("a" apropos)
    ("d" apropos-documentation)
    ("v" apropos-variable)
    ("c" apropos-command)
    ("l" apropos-library)
    ("u" apropos-user-option)
    ("e" apropos-value))
  ;; Recommended binding:
  (global-set-key (kbd "C-c h") 'hydra-apropos/body)
#+END_SRC

** example 11: rectangle-mark-mode
#+begin_src emacs-lisp
  ;;** Example 11: rectangle-mark-mode
  (require 'rect)
  (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                       :color pink
                                       :post (deactivate-mark))
    "
    ^_k_^     _d_elete    _s_tring
  _h_   _l_   _o_k        _y_ank
    ^_j_^     _n_ew-copy  _r_eset
  ^^^^        _e_xchange  _u_ndo
  ^^^^        ^ ^         _x_kill
  "
    ("h" rectangle-backward-char nil)
    ("l" rectangle-forward-char nil)
    ("k" rectangle-previous-line nil)
    ("j" rectangle-next-line nil)
    ("e" hydra-ex-point-mark nil)
    ("n" copy-rectangle-as-kill nil)
    ("d" delete-rectangle nil)
    ("r" (if (region-active-p)
             (deactivate-mark)
           (rectangle-mark-mode 1)) nil)
    ("y" yank-rectangle nil)
    ("u" undo nil)
    ("s" string-rectangle nil)
    ("x" kill-rectangle nil)
    ("o" nil nil))

  ;; Recommended binding:
  (global-set-key (kbd "C-x SPC") 'hydra-rectangle/body)

#+end_src
** example 12: org-agenda-view
#+begin_src emacs-lisp
  ;;** Example 12: org-agenda-view
  (defun org-agenda-cts ()
    (and (eq major-mode 'org-agenda-mode)
         (let ((args (get-text-property
                      (min (1- (point-max)) (point))
                      'org-last-args)))
           (nth 2 args))))

  (defhydra hydra-org-agenda-view (:hint none)
    "
  _d_: ?d? day        _g_: time grid=?g?  _a_: arch-trees
  _w_: ?w? week       _[_: inactive       _A_: arch-files
  _t_: ?t? fortnight  _f_: follow=?f?     _r_: clock report=?r?
  _m_: ?m? month      _e_: entry text=?e? _D_: include diary=?D?
  _y_: ?y? year       _q_: quit           _L__l__c_: log = ?l?"
    ("SPC" org-agenda-reset-view)
    ("d" org-agenda-day-view (if (eq 'day (org-agenda-cts)) "[x]" "[ ]"))
    ("w" org-agenda-week-view (if (eq 'week (org-agenda-cts)) "[x]" "[ ]"))
    ("t" org-agenda-fortnight-view (if (eq 'fortnight (org-agenda-cts)) "[x]" "[ ]"))
    ("m" org-agenda-month-view (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
    ("y" org-agenda-year-view (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
    ("l" org-agenda-log-mode (format "% -3S" org-agenda-show-log))
    ("L" (org-agenda-log-mode '(4)))
    ("c" (org-agenda-log-mode 'clockcheck))
    ("f" org-agenda-follow-mode (format "% -3S" org-agenda-follow-mode))
    ("a" org-agenda-archives-mode)
    ("A" (org-agenda-archives-mode 'files))
    ("r" org-agenda-clockreport-mode (format "% -3S" org-agenda-clockreport-mode))
    ("e" org-agenda-entry-text-mode (format "% -3S" org-agenda-entry-text-mode))
    ("g" org-agenda-toggle-time-grid (format "% -3S" org-agenda-use-time-grid))
    ("D" org-agenda-toggle-diary (format "% -3S" org-agenda-include-diary))
    ("!" org-agenda-toggle-deadlines)
    ("[" (let ((org-agenda-include-inactive-timestamps t))
           (org-agenda-check-type t 'timeline 'agenda)
           (org-agenda-redo)
           (message "Display now includes inactive timestamps as well")))
    ("q" (message "Abort") :exit t)
    ("v" nil))

  ;; Recommended binding:
    (define-key org-agenda-mode-map "v" 'hydra-org-agenda-view/body)
#+end_src

#+RESULTS:
: hydra-org-agenda-view/body

** example 13: automatic columns
#+begin_src emacs-lisp
  ;;** Example 13: automatic columns
  (defhydra hydra-movement ()
    ("j" next-line "down" :column "Vertical")
    ("k" previous-line "up")
    ("l" forward-char "forward" :column "Horizontal")
    ("h" backward-char "back"))

#+end_src

#+RESULTS:
: hydra-movement/body

** End of hydra

#+BEGIN_SRC emacs-lisp
);; end of hydra

#+END_SRC



* TODO fix custom-file.el
